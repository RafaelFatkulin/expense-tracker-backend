// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model EmailChange {
  token      String   @id @db.Char(21)
  newEmail   String
  userId     Int      @unique
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  validUntil DateTime @default(dbgenerated("(timezone('utc'::text, now()) + '2 days'::interval)")) @db.Timestamp(6)

  @@map("email-change")
}

model EmailVerification {
  token      String   @id @db.Char(21)
  userId     Int      @unique
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  validUntil DateTime @default(dbgenerated("(timezone('utc'::text, now()) + '2 days'::interval)")) @db.Timestamp(6)

  @@map("email-verification")
}

model PasswordReset {
  token      String   @id @db.Char(21)
  userId     Int      @unique
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  validUntil DateTime @default(dbgenerated("(timezone('utc'::text, now()) + '2 days'::interval)")) @db.Timestamp(6)

  @@map("password-reset")
}

model User {
  id                Int                @id @default(autoincrement())
  username          String             @unique
  email             String             @unique
  passwordHash      String
  emailVerified     Boolean            @default(false)
  registrationDate  DateTime           @default(dbgenerated("timezone('UTC'::text, now())")) @db.Timestamp(6)
  emailChange       EmailChange?
  emailVerification EmailVerification?
  passwordReset     PasswordReset?

  wallets Wallet[]
  transactionTags TransactionTag[]

  @@map("user")
}

model Wallet {
  id    Int    @id @default(autoincrement())
  title String

  transactions Transaction[]
  user         User          @relation(fields: [userId], references: [id])
  userId       Int

  @@map("wallet")
}

model TransactionTag {
  id    Int     @id @default(autoincrement())
  title String
  color String? @default("#000000")
  transactions Transaction[]

  user User @relation(fields: [userId], references: [id])
  userId Int

  @@map("transaction_tag")
}

enum TransactionType {
  INCOME
  EXPENSE
}

model Transaction {
  id       Int             @id @default(autoincrement())
  type     TransactionType @default(EXPENSE)
  title    String
  amount   Decimal

  wallet   Wallet?         @relation(fields: [walletId], references: [id])
  walletId Int?

  transactionTag TransactionTag? @relation(fields: [transactionTagId], references: [id])
  transactionTagId Int?

  createdAt DateTime @default(dbgenerated("timezone('UTC'::text, now())")) @db.Timestamp(6)

  @@map("transaction")
}
